#======================
# libstmm-input-gtk-xi
#======================

Requirements
------------
g++ compiler or compatible (>= C++14)
libxi-dev
libx11-dev
libstmm-input-ev (installed)
libstmm-input-gtk (installed)
libstmm-input-dl (if used as a plug-in)


Important notes
---------------
If this library is built with static linking it cannot be loaded as a plug-in.

This library installs a 'stmm-input-gtk-xi.dlp' file in the directory
'{destdir}/share/stmm-input-dl'. This means that in order for libstmm-input-dl
to find it, it has to be installed in the same {destdir} (see below).

Currently only works with g++.



Instructions
------------

From this directory execute the following commands:

  $ mkdir build
  $ cd build

  $ cmake -D CMAKE_BUILD_TYPE=Release ..

Instead of 'Release' CMAKE_BUILD_TYPE can also be set to
   'Debug', 'MinSizeRel' or 'RelWithDebInfo'.
To build the documentation add option (before '..')
   '-D BUILD_DOCS=ON' to the preceding command.
To build the tests add option
   '-D BUILD_TESTING=ON' to the preceding command
   (read below on how to setup google test).
To change the default installation directory add definition
   '-D CMAKE_INSTALL_PREFIX=/home/adam/mylib' to the preceding command.

  $ make

  $ sudo make install

sudo might be omitted in the preceding command if installing to a directory 
owned by the current user.

  $ sudo ldconfig


Alternatively you can just execute the script

  $ ./scripts/install_libstmm-input-gtk-xi.py -b Release  --destdir /home/adam/mylib

setting the parameter(s) to your preferred value (like above).

  $ ./scripts/install_libstmm-input-gtk-xi.py  --help

for a description of all available options.


Setting up googletest
---------------------

There are many ways of setting up googletest.

If you have cloned this project with

  $ git clone https://github.com/efanomars/stmm-input-xi.git

you can also update git's submodules.
From the parent of this directory (containing the '.gitmodules' file):

  $ git submodule update --init --recursive

which will download the sources and put them into the 'googletest' subdirectory
for all the libraries.


Alternatively, if you just downloaded the zip file (without .git folder) and
already have your googletest sources somewhere on your computer, you can
create a symbolic link to them. From this directory:

  $ rmdir googletest
  $ ln -s /path/to/googletest/dir  googletest

To do the last operation, automatically checking if the directory really contains
googletest, you can call the following script from the parent of this directory

  $ ./scripts/googletest_create_links.py --google-src-dir=/path/to/googletest/dir

which will create the symbolic link for all the sub-projects with tests.


In all cases cmake will build googletest sources with the library's tests.
